openapi: '3.0.2'
info:
  title: Book Club API
  version: '1.0'
servers:
  - url: http://127.0.0.1:8888/
paths:
  /users/{id}:
    get:
      description: Retrieves the corresponding user from the database
      summary: Retrieves one user from the database.
      parameters:
        - in: path
          name: id
          schema: 
            type: integer
          required: true
          description: User ID passed in parameter
      responses:
          '200':
            description: User corresponding to this ID
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/User"

  /users:
    get:
      description: Returns the list of all users.
      summary: Returns the list of all users in the database.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    
      
  

  /books/{id}:
    get:
      summary: Retrieve a single book from the database
      description: Retrieves data corresponding to one book in the database. 
      parameters:
        - in: path
          name: id
          schema: 
            type: integer
          required: true
          description: numeric ID of the book ID to get
      responses:
        200:
          description: book corresponding to the parameter id.
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Book'
        404:
              description: book not found - database returned empty query
    delete:
        summary: Delete one book from the database
        description: Looks for the book passed in parameter, then deletes it 
        parameters:
          - in: path
            name: id
            schema: 
              type: integer
            required: true
            description: numeric ID of the book ID to delete
        responses:
          '200':
            description: OK
          '404':
            description: The current ID was not found in the database
    patch:
      description: Update a book. The new values of the book fields must be contained into a JSON object encapsulated into the JSON request body.
      summary: Updates a book in the database.
      parameters:
        - in: path
          name: id
          schema: 
            type: integer
          required: true
          description: numeric ID of the book ID to update
      requestBody:
        description: book to be added to be updated
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/EditBook"
      responses:
        '200':
          description: OK

  /books:
    get:
      description: Retrieves the list of all the books present in the book library
      summary: Retrieves all the books in the database.
      responses:
        '200':
          description: returns a list of books
          content:
            application/json:
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/Book"
    post:
      description: Insert a new book into the database. The book JSON object should be in the query body.
      summary: Inserts a new book into the database.
      requestBody:
        description: book to be added to the inventory
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/EditBook"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'

components:
  schemas:
    Book:
      title: Book
      type: object
      properties:
        id:
          type: integer
          description: the book ID
          example: 1
        title:
          type: string
          description: book title
          example: 'Grapes of Wrath'
        author:
            type: string
            description: author name
            example: 'John Steinbeck'
        genre:
            type: string
            description: genre type
            example: 'Drama'
    EditBook:
      title: EditBook
      description: subtype used in POST, PATCH queries. Missing the ID field as it is filled by the DB anyway.
      type: object
      properties:
        title:
          type: string
          description: book title
          example: 'Grapes of Wrath'
        author:
            type: string
            description: author name
            example: 'John Steinbeck'
        genre:
            type: string
            description: genre type
            example: 'Drama'
    User:
      title: User
      type: object
      properties:
        id:
          type: integer
          description: the user ID  
        firstName:
          type: string
          description:  user's first name
          example: 'Peter'
        lastName:
          type: string
          description: user's last name
          example: 'Parker'
        nickName:
          type: string
          description: user's nickName
          example: 'Spidey'


